{"version":3,"sources":["components/MenuMakanan/MenuMakanan.js","components/MenuMinuman/MenuMinuman.js","App.js","serviceWorker.js","index.js"],"names":["MenuMakanan","props","stock","style","border","width","margin","namaMenu","hargaMenu","MenuMinuman","this","Component","App","handleGantiNama","nama","setState","namaResto","handleChange","event","name","target","value","state","namaPembeli","keterangan","jenisPembayaran","menuMakanan","harga","menuMinuman","className","onClick","marginTop","onChange","map","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1da0fb20.chunk.js","sourcesContent":["import React from 'react'\n\nvar MenuMakanan = (props) => {\n    if (props.stock !== 0) {\n        return(\n            <div style={{border: \"1px solid black\", width: 300, margin: 'auto'}}>\n                <p>Nama Menu: {props.namaMenu}</p>\n                <p>Harga: Rp. {props.hargaMenu}</p>\n                <p>Stock: {props.stock}</p>\n            </div>\n        )    \n    } else {\n        return null;\n    }\n    \n}\n\nexport default MenuMakanan","import React, { Component } from 'react'\n\n// nama class diawali huruf kapital (uppercase)\nclass MenuMinuman extends Component {\n    render(){\n        return (\n            <div style={{border: \"1px solid black\", width: 300, margin: 'auto'}}>\n                <p>Nama Menu: {this.props.namaMenu}</p>\n                <p>Harga: Rp. {this.props.hargaMenu}</p>\n            </div>\n        )\n    }\n}\n\nexport default MenuMinuman","import React, { Component } from 'react';\nimport './App.css';\nimport MenuMakanan from './components/MenuMakanan/MenuMakanan'\nimport MenuMinuman from './components/MenuMinuman/MenuMinuman'\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      namaResto: 'Codepolitan',\n      namaPembeli: '',\n      keterangan: '',\n      jenisPembayaran: '',\n\n      menuMakanan: [\n        { nama: 'Ayam Bakar', harga: 25000, stock: 10 },\n        { nama: 'Nasi Goreng', harga: 22000, stock: 0 },\n      ],\n      menuMinuman: [\n        { nama: 'Juice Melon',    harga: 15000 },\n        { nama: 'Milkshake Strawberry', harga: 20000 },\n        { nama: 'Juice Tomat',    harga: 15000 },\n        { nama: 'Juice Mangga',   harga: 15000 },\n        { nama: 'Juice Alpukat',  harga: 15000 },\n      ]\n    }\n  }\n\n  handleGantiNama = (nama) => {\n    this.setState({ namaResto: nama})\n  }\n\n  handleChange = (event) => {\n    var name = event.target.name \n    var value = event.target.value\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Cafe and Resto {this.state.namaResto}</h1>\n        <button className=\"btn btn-primary\" onClick={() => this.handleGantiNama('Margonda')}>Ganti nama Resto</button>\n        \n        <div className=\"row\" style={{marginTop: '10px'}}>\n          <div className=\"col-md-4 offset-md-4\">\n            <form>\n              <div className=\"form-group\">\n                <label>Nama Pembeli</label>\n                <input \n                  className=\"form-control\" \n                  name=\"namaPembeli\" \n                  onChange={this.handleChange}\n                  value={this.state.namaPembeli}\n                />\n                <small>Nama pembeli: {this.state.namaPembeli}</small>\n              </div>\n              <div className=\"form-group\">\n                <label>Keterangan: </label>\n                <textarea\n                className=\"form-control\"\n                name=\"keterangan\"\n                onChange={this.handleChange}\n                value={this.state.keterangan}></textarea>\n                <small>Keterangan: {this.state.keterangan}</small>\n              </div>\n              <select \n                className=\"form-control\"\n                name=\"jenisPembayaran\"\n                value={this.state.value} \n                onChange={this.handleChange}>\n                <option value=\"cash\">Cash</option>\n                <option value=\"kartuKredit\">Kartu Kredit</option>\n                <option value=\"voucher\">Voucher</option>\n              </select>\n<small>Jenis Pembayaran: {this.state.jenisPembayaran}</small>\n            </form>\n          </div>\n        </div>\n        \n        <h2>Menu Makanan</h2>\n        <MenuMakanan \n          namaMenu={this.state.menuMakanan[0].nama} \n          hargaMenu={this.state.menuMakanan[0].harga}\n          stock={this.state.menuMakanan[0].stock}  \n        />\n        <MenuMakanan \n          namaMenu={this.state.menuMakanan[1].nama} \n          hargaMenu={this.state.menuMakanan[1].harga} \n          stock={this.state.menuMakanan[1].stock}  \n        />\n        <h2>Menu Minuman</h2>\n        { this.state.menuMinuman.map(menu => \n          <MenuMinuman namaMenu={menu.nama} hargaMenu={menu.harga}/>  \n          )}        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}